@top Script { statement* }

@skip { spaces | newline | LineComment | BlockComment }


@precedence {
  LineComment,
  call,
  else @right,
  member,
  not,
  equals @left,
  notEqual @left,
  times @left,
  divide @left,
  pow @left,
  plus @left,
  negation @left,
  rel @left,
  and @left,
  or @left,
  assign @right,
  inc @right,
  dec @right,
  incBy @right,
  decBy @right
}

expression {
  Number |
  String |
  kw<"this"> |
  kw<"null"> |
  kw<"true"> |
  kw<"false"> |
  TemplateString |
  VariableName |
  ExternalObjectReference |
  BinaryExpression |
  ParenthesizedExpression |
  MemberExpression |
  AssignmentExpression |
  Increment |
  Decrement |
  IncrementByExpression |
  DecrementByExpression |
  CallExpression { expression !call ArgList } |
  ArrowFunction
}

ExternalObjectReference {
  "@" (objectNameWithoutSpace | String | TemplateString)
}

MemberExpression {
  expression !member "." VariableName
}

ArrowFunction { (ParamList | FuncArgName ) "=>" Block }

commaSep<content> {
  "" | content ("," content?)*
}

ArgList {
  "(" commaSep<expression> ")"
}


@skip {} {
  TemplateString[isolate] {
    templateStart (templateEscape | templateContent | templateExpr)* templateEnd
  }

  String[isolate] {
    '"' (stringContentDouble | Escape)* '"' |
    "'" (stringContentSingle | Escape)* "'"
  }

  BlockComment[isolate] { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd }
}

templateExpr[@name=Interpolation,isolate] { InterpolationStart expression? InterpolationEnd }


ParenthesizedExpression { "(" expression ")" }

BinaryExpression {
  expression !times (divide | ArithOp<"%"> | ArithOp<"*">) expression |
  expression !plus plusMin expression |
  expression !rel (LessThan | CompareOp<"<=" | ">" "="?> ) expression |
  expression !pow ArithOp<"^"> expression |
  Negation { !negation plusMin expression } |
  expression !equals LogicOp<"=="> expression |
  expression !notEqual LogicOp<"!="> expression |
  expression !and LogicOp<"&&"> expression |
  expression !or LogicOp<"||" | "??"> expression |
  PostfixExpression { !not LogicOp<"!"> expression } |
  ForStatement { kw<"for"> ForSpec statement } |
  WhileStatement { kw<"while"> WhileSpec statement } |
  IfStatement { kw<"if"> IfSpec statement (!else kw<"else"> (statement | expression ))? }
}

statement[@isGroup=Statement] {
  VariableDeclaration |
  ExpressionStatement { expression semi } |
  StructDefinition {kw<"struct"> FuncName StructSpec } |
  FuncDeclaration |
  Block |
  ";"
}

StructSpec {
  "{"
  (StructProperty {StructPropertyName ":" expression} ","?)*
  (StructFunction {FuncName ParamList Block})*
  "}"
}

IfSpec {
  "(" expression ")"
}

WhileSpec {
  "("
  (VariableDeclaration | expression)
  ")"
}

ForSpec {
  "("
  (VariableDeclaration | expression)? ";" expression? ";" expression?
  ")"
}


Block {
  "{" statement* "}"
}

@context trackNewline from "./tokens.js"

@external tokens insertSemicolon from "./tokens.js" { insertSemi }

semi { ";" | insertSemi }

plusMin { ArithOp<"+" | "-"> }

AssignmentExpression {
  ( VariableName | MemberExpression ) !assign "=" expression
}

Increment {
  VariableName !inc "++"
}
Decrement {
  VariableName !dec "--"
}
IncrementByExpression {
  VariableName !incBy "+=" statement
}
DecrementByExpression {
  VariableName !decBy "-=" statement
}

VariableName { identifier ~name }

variableDeclarationKeyword { kw<"local"> | kw<"let"> }

VariableDeclaration {
  variableDeclarationKeyword VariableName ("=" expression)?
}

funcKeyword { kw<"func"> }

FuncDeclaration {
  funcKeyword FuncName ParamList Block
}

ParamList {
  "(" commaSep<FuncArgName> ")"
}

FuncName { identifier }
StructPropertyName { identifier }
FuncArgName { identifier ~name }

kw<term> { @specialize[@name={term}]<identifier, term> }

@local tokens {
  InterpolationStart[closedBy=InterpolationEnd] { "${" }
  templateEnd { "`" }
  templateEscape[@name=Escape] { Escape }
  @else templateContent
}

@local tokens {
  blockCommentEnd { "*/" }
  blockCommentNewline { "\n" }
  @else blockCommentContent
}

@tokens {
  spaces[@export] {  $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline[@export] { "\n" }
  ArithOp<expr> { expr }
  CompareOp<expr> { expr }
  LogicOp<expr> { expr }
  LineComment[isolate] { "//" ![\n]* }
  divide[@name=ArithOp] { "/" }
  @precedence { "/*", LineComment, divide }

  objectNameWithoutSpace { (@asciiLetter | @digit | "_")+ }


  Number {
    (@digit+ | @digit+ "." @digit+ | "." @digit+)
  }

  @precedence { Number "." }

  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  identifier { identifierChar (identifierChar | @digit)* }
  @precedence { spaces, newline, identifier }

  hex { @digit | $[a-fA-F] }

  Escape {
    "\\" ("x" hex hex | "u" ("{" hex+ "}" | hex hex hex hex) | ![xu])
  }

  stringContentSingle { ![\\\n']+ }
  stringContentDouble { ![\\\n"]+ }
  templateStart { "`" }
  InterpolationEnd[openedBy=InterpolationStart] { "}" }

  LessThan[@name=CompareOp] { "<" }
  "{" "}" "<" ">"
}
