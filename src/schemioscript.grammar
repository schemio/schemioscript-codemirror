@top Script { statement* }

@skip { spaces | newline | LineComment }


@precedence {
  LineComment,
  not,
  times @left,
  divide @left,
  pow @left,
  plus @left,
  and @left,
  or @left,
  assign @right
}

expression {
  VariableName |
  Number |
  BinaryExpression |
  ParenthesizedExpression |
  AssignmentExpression
  // VariableDeclaration
}

ParenthesizedExpression { "(" expression ")" }

BinaryExpression {
  expression !times (divide | ArithOp<"%"> | ArithOp<"*">) expression |
  expression !plus plusMin expression |
  expression !pow ArithOp<"^"> expression |
  expression !and LogicOp<"&&"> expression |
  expression !or LogicOp<"||" | "??"> expression |
  PostfixExpression { !not LogicOp<"!"> expression }
}

statement[@isGroup=Statement] {
  VariableDeclaration |
  ExpressionStatement { expression semi } |
  ";"
}

@external tokens insertSemicolon from "./tokens.js" { insertSemi }

semi { ";" | insertSemi }

plusMin { ArithOp<"+" | "-"> }

AssignmentExpression {
  VariableName !assign "=" expression
}

VariableName { identier }

variableDeclarationKeyword { kw<"local"> }

VariableDeclaration {
  variableDeclarationKeyword AssignmentExpression
}

kw<term> { @specialize[@name={term}]<identier, term> }


@tokens {
  spaces[@export] { @whitespace+ }
  newline[@export] { $[\r\n\u2028\u2029] }
  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  LineComment[isolate] { "//" ![\n]* }
  divide[@name=ArithOp] { "/" }
  @precedence { "/*", LineComment, divide }

  Number { @digit+ }
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  identier { identifierChar (identifierChar | @digit)* }
  @precedence { spaces, newline, identier }
}
