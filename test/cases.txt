# Simple expression

a1 +3

==>

Script(ExpressionStatement(BinaryExpression(VariableName,ArithOp,Number)))


# Simple expression2

(a1+(2-3))

==>

Script(ExpressionStatement(ParenthesizedExpression(BinaryExpression(VariableName,ArithOp,ParenthesizedExpression(BinaryExpression(Number,ArithOp,Number))))))


# Simple expression with whitespace

(a + b * 3 - w^2%3)

==>

Script(ExpressionStatement(ParenthesizedExpression(BinaryExpression(BinaryExpression(VariableName,ArithOp,BinaryExpression(VariableName,ArithOp,Number)),ArithOp,BinaryExpression(VariableName,ArithOp,BinaryExpression(Number,ArithOp,Number))))))

# Assigment expression

qwe = x* 3 +4

==>

Script(ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(BinaryExpression(VariableName,ArithOp,Number),ArithOp,Number))))


# Local variable assigment

local q = 34

==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,Number)))


# Logic expression

a || b && !c && x

==>

Script(ExpressionStatement(BinaryExpression(VariableName,LogicOp,BinaryExpression(BinaryExpression(VariableName,LogicOp,BinaryExpression(PostfixExpression(LogicOp,VariableName))),LogicOp,VariableName))))


# Semicolon statements

local n = 4; n = n + 1; n = n * 3;

==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,Number)),ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,Number))),ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,Number))))


# Multi-line statements

local a = 3

local b = a + 4
local z = 23

==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,Number)),VariableDeclaration(local,AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,Number))),VariableDeclaration(local,AssignmentExpression(VariableName,Number)))


# Strings

local name = "John " + "Conor"
"test"


==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,BinaryExpression(String,ArithOp,String))),ExpressionStatement(String))


# Template strings

local name = `${myName} Conor (${age+3})`


==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,TemplateString(Interpolation(InterpolationStart,VariableName,InterpolationEnd),Interpolation(InterpolationStart,BinaryExpression(VariableName,ArithOp,Number),InterpolationEnd)))))


# Block comment

local a = 3
/*
local b = a + 4
*/
local z = 23 + /* "qwe" */ 5

==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,Number)),BlockComment,VariableDeclaration(local,AssignmentExpression(VariableName,BinaryExpression(Number,ArithOp,BlockComment,Number))))


# For loop

for(local i = 0; i < 4; i++) {
    j--
    z +=5
}

==>

Script(ExpressionStatement(BinaryExpression(ForStatement(for,ForSpec(VariableDeclaration(local,AssignmentExpression(VariableName,Number)),BinaryExpression(VariableName,CompareOp,Number),Increment(VariableName)),Block("{",ExpressionStatement(Decrement(VariableName)),ExpressionStatement(IncrementByExpression(VariableName,ExpressionStatement(Number))),"}")))))


# While loop

while (j > 0) {
    z += 3
}

==>

Script(ExpressionStatement(BinaryExpression(WhileStatement(while,WhileSpec(BinaryExpression(VariableName,CompareOp,Number)),Block("{",ExpressionStatement(IncrementByExpression(VariableName,ExpressionStatement(Number))),"}")))))


# If condition

if (a < b) {
    z = a + b
}

==>

Script(ExpressionStatement(BinaryExpression(IfStatement(if,IfSpec(BinaryExpression(VariableName,CompareOp,VariableName)),Block("{",ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,VariableName))),"}")))))


# If condition 2

if ( a == b ) {
    z = 2
} else if ( z != k + 2) {
    b = 2
}

==>

Script(ExpressionStatement(BinaryExpression(IfStatement(if,IfSpec(BinaryExpression(VariableName,LogicOp,VariableName)),Block("{",ExpressionStatement(AssignmentExpression(VariableName,Number)),"}"),else,ExpressionStatement(BinaryExpression(IfStatement(if,IfSpec(BinaryExpression(BinaryExpression(VariableName,LogicOp,VariableName),ArithOp,Number)),Block("{",ExpressionStatement(AssignmentExpression(VariableName,Number)),"}"))))))))


# If else condition

if (a < b) {
    z = a + b
} else {
    z = a - b
}

==>

Script(ExpressionStatement(BinaryExpression(IfStatement(if,IfSpec(BinaryExpression(VariableName,CompareOp,VariableName)),Block("{",ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,VariableName))),"}"),else,Block("{",ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,VariableName))),"}")))))



# If else if condition

if (a < b) {
    z = a + b
} else if (z > g) {
    z = a - b
} else {
    z = 4
}

==>

Script(ExpressionStatement(BinaryExpression(IfStatement(if,IfSpec(BinaryExpression(VariableName,CompareOp,VariableName)),Block("{",ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,VariableName))),"}"),else,ExpressionStatement(BinaryExpression(IfStatement(if,IfSpec(BinaryExpression(VariableName,CompareOp,VariableName)),Block("{",ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,VariableName))),"}"),else,Block("{",ExpressionStatement(AssignmentExpression(VariableName,Number)),"}"))))))))



# If as assignment

z = if (a < b) { 0 } else { 1 }

==>

Script(ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(IfStatement(if,IfSpec(BinaryExpression(VariableName,CompareOp,VariableName)),Block("{",ExpressionStatement(Number),"}"),else,Block("{",ExpressionStatement(Number),"}"))))))



# Function declaration

func test1() {
   z = ""
   k = z + 3
}

func test1(a) {
    z = a + 5
    z + 2
}

func test1(a, b, c) {
    z = a + b + c
    z + 2
}
==>

Script(FuncDeclaration(func,FuncName,ParamList,Block("{",ExpressionStatement(AssignmentExpression(VariableName,String)),ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,Number))),"}")),FuncDeclaration(func,FuncName,ParamList(FuncArgName),Block("{",ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(VariableName,ArithOp,Number))),ExpressionStatement(BinaryExpression(VariableName,ArithOp,Number)),"}")),FuncDeclaration(func,FuncName,ParamList(FuncArgName,FuncArgName,FuncArgName),Block("{",ExpressionStatement(AssignmentExpression(VariableName,BinaryExpression(BinaryExpression(VariableName,ArithOp,VariableName),ArithOp,VariableName))),ExpressionStatement(BinaryExpression(VariableName,ArithOp,Number)),"}")))


# Function invocation

sin(a) * rnd()

==>

Script(ExpressionStatement(BinaryExpression(CallExpression(VariableName,ArgList(VariableName)),ArithOp,CallExpression(VariableName,ArgList))))


# Arrow function

local func1 = () => {
    log("Hello")
}

==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,ArrowFunction(ParamList,Block("{",ExpressionStatement(CallExpression(VariableName,ArgList(String))),"}")))))


# Arrow function with single argument

local func1 = (a) => {
    log("Hello")
}

==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,ArrowFunction(ParamList(FuncArgName),Block("{",ExpressionStatement(CallExpression(VariableName,ArgList(String))),"}")))))


# Arrow function with multiple argument

local func1 = (a, b, c) => {
    log("Hello")
}

==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,ArrowFunction(ParamList(FuncArgName,FuncArgName,FuncArgName),Block("{",ExpressionStatement(CallExpression(VariableName,ArgList(String))),"}")))))


# Arrow function with single argument without parenthesis

local func1 = x => {
    log("Hello" + x)
}

==>

Script(VariableDeclaration(local,AssignmentExpression(VariableName,ArrowFunction(FuncArgName,Block("{",ExpressionStatement(CallExpression(VariableName,ArgList(BinaryExpression(String,ArithOp,VariableName)))),"}")))))


# Member expression

local m = Map()
m.set("name", "John")

local node = findNode("blah")
node.getParent().getParent().setName("dsfsaf")

==>

Script(
    VariableDeclaration(
        local,AssignmentExpression(
            VariableName,CallExpression(VariableName,ArgList)
        )
    ),
    ExpressionStatement(
        CallExpression(
            MemberExpression(VariableName,VariableName),ArgList(String,String)
        )
    ),
    VariableDeclaration(
        local,AssignmentExpression(VariableName,CallExpression(VariableName,ArgList(String)))
    ),
    ExpressionStatement(
        CallExpression(MemberExpression(CallExpression(MemberExpression(CallExpression(MemberExpression(VariableName,VariableName),ArgList),VariableName),ArgList),VariableName),ArgList(String))))
